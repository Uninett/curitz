#!/usr/bin/env python3
from ritz import ritz, parse_config, notifier, caseType, caseState, __version__, ProtocolError, NotConnectedError
import curses
import curses.textpad
import ritz.textpad as utf8textpad
import logging
from culistbox import listbox, BoxSize, BoxElement
import datetime
import argparse
import sys
import textwrap
import re
import time


log = logging.getLogger("cuRitz")

def updateStatus(screen, text):
    screen.addnstr(0, screen_size.length-16, "{:<16}".format(text[:16]), 100)
    screen.noutrefresh()
    screen.refresh()
    curses.doupdate()


def interfaceRenamer(s):
    s = s.replace("HundredGigE", "Hu")
    s = s.replace("GigabitEthernet", "Gi")
    s = s.replace("TenGigiabitEthernet", "Te")
    s = s.replace("TenGigE", "Te")
    s = s.replace("FastEthernet", "Fa")
    s = s.replace("Port-channel", "Po")
    s = s.replace("Loopback", "Lo")
    s = s.replace("Tunnel", "Tu")
    s = s.replace("Ethernet", "Eth")
    s = s.replace("Vlan", "Vl")
    return s


def uiShowLogWindow(screen, heading, lines):
    (screen_y, screen_x) = screen.getmaxyx()

    center_x = screen_x // 2
    if center_x < 40:
        center_x = 40
    if screen_y < 30:
        box_h = screen_y - 8
    else:
        box_h = 30
    box = listbox(box_h,
                  80,
                  3,
                  center_x - 40)

    # Display box on the midle of screen
    box.heading = heading
    box.clear()
    for l in lines:
        box.add(l)

    box.draw()

    while True:
        x = screen.getch()
        if x == -1:
            pass
        elif x == curses.KEY_UP:
            # Move up one element in list
            if box.active_element > 0:
                box.active_element -= 1

        elif x == curses.KEY_DOWN:
            # Move down one element in list
            if box.active_element < len(lines) - 1:
                box.active_element += 1

        elif x == curses.KEY_NPAGE:
            a = box.active_element + box.pagesize
            if a < len(lb) - 1:
                box.active_element = a
            else:
                box.active_element = len(box) - 1

        elif x == curses.KEY_PPAGE:
            a = box.active_element - box.pagesize
            if a > 0:
                box.active_element = a
            else:
                box.active_element = 0
        else:
            return
        box.draw()
        curses.doupdate()


def uiShowHistory(screen, caseid):
    global cases
    lines = []
    updateStatus(screen, "Waiting...")
    for line in cases[caseid].history:
        lines.append("{} {}".format(line["date"], line["header"]))
        for l in line["log"]:
            for wrapped_line in textwrap.wrap(l, 76, break_long_words=False):
                lines.append("  {}".format(wrapped_line))
    updateStatus(screen, "")
    uiShowLogWindow(screen, "History Case {} - {}".format(caseid, cases[caseid].get("descr", "")), lines)

def uiShowLog(screen, caseid):
    global cases
    lines = []
    updateStatus(screen, "Waiting...")
    for line in cases[caseid].log:
        lines.append("{}".format(line["date"]))
        for l in textwrap.wrap(line["header"], 76, break_long_words=False):
            lines.append("  {}".format(l))
    updateStatus(screen, "")
    uiShowLogWindow(screen, "System Log Case {} - {}".format(caseid, cases[caseid].get("descr", "")), lines)

def uiShowAttr(screen, caseid):
    global cases
    lines = []
    for line in cases[caseid]._attrs:
        lines.append("{:<15} : {:>}".format(line, repr(cases[caseid]._attrs[line])))

    uiShowLogWindow(screen, "Case {} - {}".format(caseid, cases[caseid].get("descr", "")), lines)


def strfdelta(tdelta, fmt):
    """
    Snipped from: https://stackoverflow.com/questions/8906926/formatting-python-timedelta-objects/17847006
    """
    d = {"days": tdelta.days}
    d["hours"], rem = divmod(tdelta.seconds, 3600)
    d["minutes"], d["seconds"] = divmod(rem, 60)
    return fmt.format(**d)


def main(screen):
    global lb, session, notifier, cases, table_structure, screen_size, casefilter
    casefilter = ""

    curses.noecho()
    curses.cbreak()
    screen.keypad(1)
    screen.timeout(1 * 1000)  # mSec timeout
    try:
        curses.start_color()
        curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_CYAN)
        curses.init_pair(10, curses.COLOR_RED, curses.COLOR_BLACK)
        curses.init_pair(11, curses.COLOR_YELLOW, curses.COLOR_BLACK)
        curses.init_pair(12, curses.COLOR_BLUE, curses.COLOR_BLACK)
        curses.init_pair(13, curses.COLOR_GREEN, curses.COLOR_BLACK)
    except curses.error:
        sys.stderr.write("You need a color terminal to run cuRitz\n")
        return

    try:
        curses.curs_set(0)
    except Exception:
        pass
    screen_size = BoxSize(*screen.getmaxyx())
    if args.kiosk:
        lb = listbox(screen_size.height - 1, screen_size.length, 1, 0)
    else:
        lb = listbox(screen_size.height - 4, screen_size.length, 1, 0)

    screen.clear()
    screen.refresh()

    table_structure = "{selected:1} {opstate:11} {admstate:8} {age:9} {router:16} {port:14} {description}"

    with ritz(c_server, username=c_user, password=c_secret) as session:
        with notifier(session) as notifier:
            try:
                runner(screen)
            except KeyboardInterrupt:
                pass

def sortCases(casedict, field="lasttrans", filter=""):
    cases_sorted = []
    for key in sorted(cases, key=lambda k: cases[k]._attrs[field]):
        show = False
        if "type" in cases[key]._attrs:
            if re.match(".*{}".format(filter), str(cases[key].get("type")), re.IGNORECASE):
                show = True
        if "state" in cases[key]._attrs:
            if re.match(".*{}".format(filter), str(cases[key].get("state")), re.IGNORECASE):
                show = True
        if "router" in cases[key]._attrs:
            if re.match(".*{}".format(filter), str(cases[key].get("router")), re.IGNORECASE):
                show = True
        if "descr" in cases[key]._attrs:
            if re.match(".*{}".format(filter), str(cases[key].get("descr")), re.IGNORECASE):
                show = True
        if "port" in cases[key]._attrs:
            if re.match(".*{}".format(filter), str(cases[key].get("port")), re.IGNORECASE):
                show = True

        if show:
            cases_sorted.append(key)

    return reversed(cases_sorted)


def create_case_list():
    global cases, visible_cases, lb, cases_selected, casefilter
    visible_cases = cases.keys()
    sorted_cases = sortCases(cases, field="updated", filter=casefilter)

    lb.clear()
    lb.heading = table_structure.format(
        selected="S",
        opstate="OpState",
        admstate="AdmState",
        router="Router",
        port="Port",
        description="Description",
        age=" Age")
    for c in sorted_cases:
        if c in visible_cases:
            case = cases[c]
            try:
                age = datetime.datetime.now() - case.opened
                common = {}
                common['selected'] = "*" if case.id in cases_selected else " "
                common['router'] = case.router
                common['admstate'] = case.state.value[:7]
                common['age'] = strfdelta(age, "{days:2d}d {hours:02}:{minutes:02}")
                common['priority'] = case.priority
                color = []
                if args.nocolor:
                    cRed = [curses.A_BOLD]
                    cYellow = []
                    cBlue = []
                    cGreen = []
                else:
                    cRed = [curses.color_pair(10)]
                    cYellow = [curses.color_pair(11)]
                    cBlue = [curses.color_pair(12)]
                    cGreen = [curses.color_pair(13)]

                if case.type == caseType.PORTSTATE:
                    if case.state in [caseState.IGNORED]:
                        color = cBlue
                    elif case.state in [caseState.CLOSED]:
                        color = cGreen
                    elif case.portstate in ['down', 'lowerLayerDown'] and case.state == caseState.OPEN:
                        color = cRed
                    elif case.portstate in ['down', 'lowerLayerDown'] and case.state in [caseState.WORKING, caseState.WAITING]:
                        color = cYellow
                    lb.add(BoxElement(case.id,
                                      table_structure.format(
                                          **common,
                                          opstate="PORT %s" % case.portstate[0:5],
                                          port=interfaceRenamer(case.port),
                                          description=case.get("descr", ""),
                                      ), color))
                elif case.type == caseType.BGP:
                    if case.state in [caseState.IGNORED]:
                        color = cBlue
                    elif case.state in [caseState.CLOSED]:
                        color = cGreen
                    elif case.bgpos == 'down' and case.state == caseState.OPEN:
                        color = cRed
                    elif case.bgpos == 'down' and case.state in [caseState.WORKING, caseState.WAITING]:
                        color = cYellow
                    lb.add(BoxElement(case.id,
                                      table_structure.format(
                                          **common,
                                          opstate="BGP  %s" % case.bgpos[0:5],
                                          port="AS{}".format(case.remote_as),
                                          description="%s %s" % (str(case.remote_addr_host), case.get("lastevent", "")),
                                      ), color))
                elif case.type == caseType.BFD:
                    if case.state in [caseState.IGNORED]:
                        color = cBlue
                    elif case.state in [caseState.CLOSED]:
                        color = cGreen
                    elif case.bfdstate == 'down' and case.state == caseState.OPEN:
                        color = cRed
                    elif case.bfdstate == 'down' and case.state in [caseState.WORKING, caseState.WAITING]:
                        color = cYellow

                    try:
                        port = case.bfdaddr
                    except Exception:
                        port = "ix {}".format(case.bfdix)
                    lb.add(BoxElement(case.id,
                                      table_structure.format(
                                          **common,
                                          opstate="BFD  %s" % case.bfdstate[0:5],
                                          port=str(port),
                                          description="{}, {}".format(case.get('neigh_rdns'),
                                                                      case.get('lastevent'))
                                      ), color))
                elif case.type == caseType.REACHABILITY:
                    if case.state in [caseState.IGNORED]:
                        color = cBlue
                    elif case.state in [caseState.CLOSED]:
                        color = cGreen
                    elif case.reachability == 'no-response' and case.state == caseState.OPEN:
                        color = cRed
                    elif case.reachability == 'no-response' and case.state in [caseState.WORKING, caseState.WAITING]:
                        color = cYellow
                    lb.add(BoxElement(case.id,
                                      table_structure.format(
                                          **common,
                                          opstate=case.reachability,
                                          port="",
                                          description="",
                                      ), color))
                elif case.type == caseType.ALARM:
                    if case.state in [caseState.IGNORED]:
                        color = cBlue
                    elif case.state in [caseState.CLOSED]:
                        color = cGreen
                    elif case.alarm_count > 0 and case.state == caseState.OPEN:
                        color = cRed
                    elif case.alarm_count > 0 and case.state in [caseState.WORKING, caseState.WAITING]:
                        color = cYellow
                    lb.add(BoxElement(case.id,
                                      table_structure.format(
                                          **common,
                                          opstate="ALRM {}".format(case.alarm_type),
                                          port="",
                                          description=case.lastevent,
                                      ), color))
                else:
                  log.error("Unable to create table for case {}".format(case.id))
                  log.error(repr(case._attrs))
            except Exception as e:
                log.exception("Exception while createing table entry for case {}".format(case.id))
                log.fatal(repr(case._attrs))
                raise

def doKeepalive():
    try:
        session.case(0)
    except ProtocolError as E:
        pass

def runner(screen):
    global cases, cases_selected, screen_size
    # Get all data for the first time
    cases = {}
    cases_selected = []

    draw(screen)
    caselist = session.get_caseids()
    for c in caselist:
        case = session.case(c)
        cases[case.id] = case
        elements = int((len(cases) / len(caselist)) * 20)
        screen.addstr(9, 10,
                      "[{:-<20}] Loaded {} of {} cases".format(
                          "=" * elements,
                          len(cases),
                          len(caselist)))
        screen.refresh()

    screen.clear()
    screen.refresh()

    create_case_list()
    lb.draw()
    draw(screen)

    update_ui = time.time()
    keepalive = time.time()

    while True:
        x = screen.getch()

        if curses.is_term_resized(*screen_size):
            # Screen is resized
            update_ui = 999
            screen_size = BoxSize(*screen.getmaxyx())
            if args.kiosk:
                lb.resize(screen_size.height - 1, screen_size.length)
            else:
                lb.resize(screen_size.height - 4, screen_size.length)
            updateStatus(screen, 'refreshed')


        while poll():
            update_ui = 999
            updateStatus(screen, "Polling")

        updateStatus(screen, "ch:{:3}".format(x))

        if x == -1:
            # Nothing happened, check for changes
            pass

        elif x == ord('q'):
            # Q pressed, Exit application
            return

        elif x == curses.KEY_UP:
            update_ui = 999
            # Move up one element in list
            if lb.active_element > 0:
                lb.active_element -= 1

        elif x == curses.KEY_DOWN:
            update_ui = 999
            # Move down one element in list
            if lb.active_element < len(lb) - 1:
                lb.active_element += 1

        elif x == curses.KEY_NPAGE:
            update_ui = 999
            a = lb.active_element + lb.pagesize
            if a < len(lb) - 1:
                lb.active_element = a
            else:
                lb.active_element = len(lb) - 1

        elif x == curses.KEY_PPAGE:
            update_ui = 999
            a = lb.active_element - lb.pagesize
            if a > 0:
                lb.active_element = a
            else:
                lb.active_element = 0

        elif x == ord('f'):
            # Change Filter
            if uiSimpleFilterWindow(screen):
                update_ui = 999

        elif x == ord('x'):
            update_ui = 999
            # (de)select a element
            if lb.active.id in cases_selected:
                cases_selected.remove(lb.active.id)
            else:
                cases_selected.append(lb.active.id)

        elif x == ord('c'):
            update_ui = 999
            # Clear selection
            cases_selected.clear()

        elif x == ord('u'):
            update_ui = 999
            # Update selected cases
            if cases_selected:
                uiUpdateCases(screen, cases_selected)
            else:
                uiUpdateCases(screen, [lb.active.id])

        elif x == ord('U'):
            update_ui = 999
            # Update selected cases
            if cases_selected:
                uiUpdateCases(screen, cases_selected)
                uiSetState(screen, cases_selected)
            else:
                uiUpdateCases(screen, [lb.active.id])
                uiSetState(screen, [lb.active.id])

        elif x == ord('s'):
            update_ui = 999
            # Update selected cases
            if cases_selected:
                uiSetState(screen, cases_selected)
            else:
                uiSetState(screen, [lb.active.id])
            curses.flash()

        elif x == ord('y'):
            update_ui = 999
            cases_to_delete = []
            for id in cases:
                if cases[id].state == caseState.CLOSED:
                    cases_to_delete.append(id)
            for id in cases_to_delete:
                cases.pop(id, None)
                if id in cases_selected:
                    cases_selected.remove(id)

        elif x == ord("="):
            update_ui = 999
            uiShowAttr(screen, lb.active.id)

        elif x == curses.KEY_ENTER or x == 10 or x == 13:  # [ENTER], CR or LF
            update_ui = 999
            uiShowHistory(screen, lb.active.id)

        elif x == ord('l'):
            # [ENTER], CR or LF
            update_ui = 999
            uiShowLog(screen, lb.active.id)

        elif x == 12:
            # CTRL + L
            update_ui = 999

        if time.time() - update_ui > 10:
            update_ui = time.time()
            create_case_list()
            lb.draw()
            draw(screen)

        if time.time() - keepalive > 60:
            keepalive = time.time()
            updateStatus(screen, "Sending keepalive")
            doKeepalive()
            updateStatus(screen, "")
        

def draw(screen):
    screen.erase()
    screen.addstr(0, 0, "cuRitz version {}  -  {}".format(__version__, c_server), curses.A_BOLD)
    screen.addstr(screen_size.height - 3, 0, "<=>=Display attributes"[:screen_size.length - 1])
    screen.addstr(screen_size.height - 2, 0, "s=Set State   u=Update History    U=Update History and Set State    f=Filter   y=Remove Closed"[:screen_size.length - 1])
    screen.addstr(screen_size.height - 1, 0, "<ENTER>=Show history  <UP/DOWN>=Navigate q=Quit  l=Show Logs   x=(de)select  c=Clear selection"[:screen_size.length - 1])
    screen.noutrefresh()
    lb.draw()
    curses.doupdate()



def uiUpdateCases(screen, caseids):
    update = uiUpdateCaseWindow(screen, len(caseids))
    if update:
        for case in caseids:
            cases[case].add_history(update)


def uiSetState(screen, caseids):
    new_state = uiSetStateWindow(screen, len(caseids))
    if new_state:
        for case in caseids:
            cases[case].set_state(new_state)
        # Remove selection when case is closed
        # It's not posilbe to change the case when it's closed on the server
        if new_state in ['closed']:
            cases_selected.clear()
            create_case_list()


def uiSetStateWindow(screen, number):
    try:
        box = listbox(9, 62, 4, 9)
        box.heading = "Set state on {} cases".format(number)
        box.add("DON'T CHANGE")
        box.add("Open")
        box.add("Working")
        box.add("wAiting")
        box.add("coNfirm-wait")
        box.add("Ignored")
        box.add("Closed")
        box.draw()

        while True:
            x = screen.getch()
            if x == -1:
                pass
            elif x == curses.KEY_UP:
                # Move up one element in list
                if box.active_element > 0:
                    box.active_element -= 1

            elif x == curses.KEY_DOWN:
                # Move down one element in list
                if box.active_element < len(box) - 1:
                    box.active_element += 1

            elif x == ord('o') or x == ord('O'):
                box.active_element = 1
            elif x == ord('w') or x == ord('W'):
                box.active_element = 2
            elif x == ord('a') or x == ord('A'):
                box.active_element = 3
            elif x == ord('n') or x == ord('N'):
                box.active_element = 4
            elif x == ord('i') or x == ord('I'):
                box.active_element = 5
            elif x == ord('c') or x == ord('C'):
                box.active_element = 6
            elif x == curses.KEY_ENTER or x == 13 or x == 10:
                if box.active_element == 0:
                    raise KeyboardInterrupt("No Change pressed")
                else:
                    return box.active.lower()
            elif x == 27 or x == ord('q') or x == ord('Q'):  # ESC and Q
                raise KeyboardInterrupt("ESC pressed")

            box.draw()
            curses.doupdate()

    except KeyboardInterrupt:
        box.clear()
    return ""


def uiUpdateCaseWindow(screen, number):
    border = curses.newwin(9, 62, 4, 9)
    textbox = curses.newwin(5, 60, 6, 10)
    border.box()
    border.addstr(0, 1, "Add new history line")
    border.addstr(8, 1, "Ctrl+C to Abort    Ctrl+G to send    Ctrl+H = Backspace")
    border.addstr(1, 1, "{} case(s) selected for update".format(number))
    border.refresh()
    if args.utf8:
        p = utf8textpad.Textbox(textbox)
    else:
        p = curses.textpad.Textbox(textbox)

    try:
        curses.curs_set(1)
    except Exception:
        pass
    try:
        text = p.edit()
    except KeyboardInterrupt:
        return ""
    try:
        curses.curs_set(0)
    except Exception:
        pass

    return text


def uiSimpleFilterWindow(screen):
    global casefilter
    border = curses.newwin(9, 62, 4, 9)
    textbox = curses.newwin(1, 60, 6, 10)
    textbox.addstr(0,0, casefilter)
    border.box()
    border.addstr(0, 1, "Really Simple Filter Generator")
    border.addstr(8, 1, "Ctrl+C to Abort    [ENTER] OK    Ctrl+H = Backspace")
    border.refresh()
    if args.utf8:
        p = utf8textpad.Textbox(textbox)
    else:
        p = curses.textpad.Textbox(textbox)

    try:
        curses.curs_set(1)
    except Exception:
        pass
    try:
        text = p.edit()
    except KeyboardInterrupt:
        return ""
    try:
        curses.curs_set(0)
    except Exception:
        pass

    casefilter = text.strip()
    log.debug(repr(casefilter))
    return True


def poll():
    global cases, cases_selected
    update = notifier.poll()
    if update:
        if update.id not in cases:
            if update.type != "state":
                # Update on unknown case thats not a state update
                # We just exit and wait for a state on that object
                return
        if update.type == "state":
            cases[update.id] = session.case(update.id)
        elif update.type == "attr":
            cases[update.id] = session.case(update.id)
        elif update.type == "history":
            pass
        elif update.type == "log":
            pass
        elif update.type == "scavenged":
            cases.pop(update.id, None)
            if update.id in cases_selected:
                cases_selected.remove(update.id)
        else:
            log.debug("unknown notify entry: %s for id %s" % (update.type, update.id))
            return False
        return True
    return False


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('-p', '--profile', default='default',
                        help='use Zino profile')
    parser.add_argument('--profiles', action='store_true',
                        help='List Zino profiles')
    parser.add_argument('-c', '--config', nargs=1, default='~/.ritz.tcl',
                        help='zino config file')
    parser.add_argument('--nocolor', action='store_true',
                        help='Show client in black-n-white mode')
    parser.add_argument('--debug', action='store_true',
                        help='write debug logfile')
    parser.add_argument('-8', action='store_true', dest='utf8',
                        help='Enable input of UTF8, does not work on all platforms')
    parser.add_argument('--kiosk', action='store_true',
                        help='Hides all keybinding fields')
    args = parser.parse_args()
    conf = parse_config("~/.ritz.tcl")

    if args.debug:
      log.setLevel(logging.DEBUG)
      log.addHandler(logging.FileHandler('curitz.log'))

    if args.profile:
        if args.profile not in conf.keys():
            print("List of zino profiles:")
            for profile in conf.keys():
                print("  {}".format(profile))
            sys.exit("Unable to find profile {}".format(args.profile))

    if args.profiles:
        print("List of zino profiles:")
        for profile in conf.keys():
            print("  {}".format(profile))
        sys.exit(0)

    c_server = conf[args.profile]["Server"]
    c_user = conf[args.profile]["User"]
    c_secret = conf[args.profile]["Secret"]
    try:
        curses.wrapper(main)
    except TimeoutError:
        sys.exit("Connection lost with the zino server...")
        
    except NotConnectedError as E:
        sys.exit("Unable to contact Zino: {}".format(E))


